/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.cafe.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.JButton;
import poly.cafe.dao.BillDAO;
import poly.cafe.dao.CardDAO;
import poly.cafe.dao.impl.BillDAOImpl;
import poly.cafe.dao.impl.CardDAOImpl;
import poly.cafe.entity.Bill;
import poly.cafe.entity.Card;
import poly.cafe.ui.SalesController;
import poly.cafe.util.XAuth;
import poly.cafe.util.XQuery;
import poly.cafe.dao.CardDAO;

/**
 *
 * @author wangquockhanh
 */
public class SalesJDialog extends javax.swing.JDialog implements SalesController {

    /**
     * Creates new form SalesJDialog1
     */
    public SalesJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCards = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Thẻ định danh");
        setSize(new java.awt.Dimension(500, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlCards.setBackground(new java.awt.Color(245, 236, 213));
        pnlCards.setLayout(new java.awt.GridLayout(5, 6));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnlCards, javax.swing.GroupLayout.Alignment.TRAILING,
                                javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnlCards, javax.swing.GroupLayout.Alignment.TRAILING,
                                javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }// GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>
        // </editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SalesJDialog dialog = new SalesJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlCards;
    // End of variables declaration//GEN-END:variables

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.setSize(600, 600);
        pnlCards.setSize(480, 400);
        this.loadCards(); // tải và hiển thị các thẻ lên cửa sổ bán hàng
    }

    @Override
    public void showBillJDialog(int cardId) { // Hiển thị cửa số phiếu bán hàng của thẻ
        try {
            BillDAO dao = new BillDAOImpl();
            Bill bill = dao.findServicingByCardId(cardId); // tải bill đang phục vụ của thẻ hoặc tạo mới
            BillJDialog dialog = new BillJDialog((Frame) this.getOwner(), true);
            dialog.setBill(bill); // Cần khai báo vào BillJDialog @Setter Bill bill
            dialog.setVisible(true);

            // Cập nhật lại trạng thái bàn sau khi đóng dialog
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent e) {
                    SalesJDialog.this.loadCards(); // Refresh lại trạng thái các bàn
                }
            });
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Lỗi khi tạo phiếu bán hàng: " + e.getMessage(), "Lỗi",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    /*
     * public void loadCards() {// tải và hiển thị các thẻ lên cửa sổ bán hàng
     * CardDAO dao = new CardDAOImpl();
     * BillDAO billDao = new BillDAOImpl();
     * List<Card> cards = dao.findAll();
     * // Thay vì dao.findAll()
     * // Lọc theo shopId hiện tại
     * String shopId = XAuth.user != null ? XAuth.user.getShopId() : null;
     * int minId = 0, maxId = 0;
     * if (shopId != null) {
     * try {
     * int sid = Integer.parseInt(shopId);
     * minId = sid * 100 + 1;
     * maxId = sid * 100 + 15;
     * } catch (NumberFormatException e) {
     * minId = Integer.MIN_VALUE;
     * maxId = Integer.MAX_VALUE;
     * }
     * } else {
     * minId = Integer.MIN_VALUE;
     * maxId = Integer.MAX_VALUE;
     * }
     * final int fMinId = minId;
     * final int fMaxId = maxId;
     * cards = cards.stream()
     * .filter(card -> card.getId() != null && card.getId() >= fMinId &&
     * card.getId() <= fMaxId)
     * .toList();
     * 
     * pnlCards.removeAll();
     * cards.forEach(card -> {
     * // Kiểm tra xem thẻ có đang được sử dụng không (chỉ kiểm tra, không tạo mới)
     * String sql = "SELECT * FROM Bills WHERE CardId=? AND Status=0";
     * Bill servicingBill = XQuery.getSingleBean(Bill.class, sql, card.getId());
     * boolean isServicing = (servicingBill != null && servicingBill.getId() !=
     * null);
     * pnlCards.add(this.createButton(card, isServicing));
     * });
     * }
     */
    public void loadCards() {
        // ----- BƯỚC 1: KHAI BÁO VÀ TÍNH TOÁN KHOẢNG ID CHO CHI NHÁNH -----
        CardDAO cardDao = new CardDAOImpl();
        String shopId = XAuth.user != null ? XAuth.user.getShopId() : null;
        int minId, maxId; // Khai báo biến

        if (shopId != null) {
            try {
                int sid = Integer.parseInt(shopId);
                minId = sid * 100 + 1;
                maxId = sid * 100 + 99; // Tăng giới hạn để hiển thị nhiều bàn hơn
            } catch (NumberFormatException e) {
                // Trường hợp dự phòng nếu shopId không hợp lệ
                minId = Integer.MIN_VALUE;
                maxId = Integer.MAX_VALUE;
            }
        } else {
            // Dành cho vai trò không thuộc chi nhánh nào, ví dụ: quản lý chuỗi
            minId = Integer.MIN_VALUE;
            maxId = Integer.MAX_VALUE;
        }

        // ----- BƯỚC 2: TẢI DỮ LIỆU HIỆU QUẢ TỪ DATABASE -----

        // Chỉ lấy các thẻ của chi nhánh hiện tại (1 truy vấn)
        List<Card> cardsInShop = cardDao.findByIdRange(minId, maxId);

        // Lấy TẤT CẢ các hóa đơn đang phục vụ của shop này (1 truy vấn)
        String servicingBillsSql = "SELECT * FROM Bills WHERE CardId BETWEEN ? AND ? AND Status = 0";
        List<Bill> servicingBills = XQuery.getBeanList(Bill.class, servicingBillsSql, minId, maxId);

        // Chuyển danh sách ID thẻ đang phục vụ vào một Set để tra cứu nhanh hơn
        java.util.Set<Integer> servicingCardIds = servicingBills.stream()
                .map(Bill::getCardId)
                .collect(java.util.stream.Collectors.toSet());

        // ----- BƯỚC 3: VẼ LẠI GIAO DIỆN -----
        pnlCards.removeAll(); // Xóa các nút cũ

        cardsInShop.forEach(card -> {
            // Kiểm tra trạng thái thẻ ngay trong bộ nhớ, không cần truy vấn CSDL nữa
            boolean isServicing = servicingCardIds.contains(card.getId());
            pnlCards.add(this.createButton(card, isServicing));
        });

        // Yêu cầu panel vẽ lại các thành phần con của nó
        pnlCards.revalidate();
        pnlCards.repaint();
    }

    private JButton createButton(Card card, boolean isServicing) { // tạo Jbutton cho thẻ
        JButton btnCard = new JButton();
        btnCard.setText(String.format("Card #%d", card.getId()));
        btnCard.setPreferredSize(new Dimension(0, 80));
        btnCard.setEnabled(card.getStatus() == 0);

        // Đặt màu dựa trên trạng thái
        if (!btnCard.isEnabled()) {
            // Thẻ bị vô hiệu hóa
            btnCard.setBackground(Color.LIGHT_GRAY);
            btnCard.setForeground(Color.DARK_GRAY);
        } else if (isServicing) {
            // Thẻ đang được sử dụng (có phiếu đang phục vụ) - Màu cam đậm
            btnCard.setBackground(new Color(255, 140, 0)); // Màu cam đậm
            btnCard.setForeground(Color.WHITE);
        } else {
            // Thẻ sẵn sàng (chưa đặt) - Màu cam nhạt
            btnCard.setBackground(new Color(255, 200, 100)); // Màu cam nhạt
            btnCard.setForeground(Color.BLACK);
        }

        btnCard.setActionCommand(String.valueOf(card.getId()));
        btnCard.addActionListener((ActionEvent e) -> {
            int cardId = Integer.parseInt(e.getActionCommand());
            SalesJDialog.this.showBillJDialog(cardId);
        });
        return btnCard;
    }

}
